df_year.acousticness.model
plot(df_year.acousticness.forecast, ylab="acousticness")
df_year.acousticness.model
plot(df_year.acousticness.forecast, ylab="acousticness")
df_year.acousticness.model
plot(df_year.acousticness.forecast, ylab="acousticness",yaxt="acousticness")
df_year.acousticness.model
plot(df_year.acousticness.forecast,main="Milage vs. Car Weight",  ylab="acousticness",yaxt="acousticness")
ggplot(df_year.acousticness.forecast)
df_year.acousticness.model
plot(df_year.acousticness.forecast,main="Milage vs. Car Weight",  ylab="acousticness",yaxt="acousticness") +
xlab("Dose (mg)")
df_year.acousticness.model
plot(df_year.acousticness.forecast,main="Milage vs. Car Weight",  ylab="acousticness")
df_year.acousticness.model
plot(df_year.acousticness.forecast,  ylab="acousticness")
df_year.acousticness.model
autoplot(df_year.acousticness.forecast,  ylab="acousticness")
df_year.acousticness.model
autoplot(df_year.acousticness.forecast,  PI = TRUE)
df_year.acousticness.model
autoplot(df_year.acousticness.forecast,  PI = TRUE)
autoplot(df_year.acousticness.forecast,  PI = TRUE)
autoplot(df_year.acousticness.forecast,conf.int.fill='azure3')
autoplot(df_year.acousticness.forecast)
plot(df_year.acousticness.forecast)
autoplot(df_year.acousticness.forecast)
forecast::autoplot(df_year.acousticness.forecast)
ggfortify::autoplot(df_year.acousticness.forecast)
autoplot(df_year.acousticness.forecast) +theme_minimal()
autoplot(df_year.acousticness.forecast,conf.int = TRUE)
autoplot(df_year.acousticness.forecast,conf.int = TRUE, conf.int.colour = "#22222")
autoplot(df_year.acousticness.forecast,conf.int = TRUE, conf.int.colour = "#222222")
for (i in 2:length(colnames(df_year.train))){
col = colnames(df_year.train)[i]
print(paste0("Training Model for: ", col))
model = train_mlp(df_year.train%>% select(col))
model.forecast = forecast(model, h=12)
assign(paste("df_year.", col,".model", sep=""),model)
assign(paste("df_year.", col,".forecast", sep=""),model.forecast)
model
autoplot(model.forecast)
}
df_year.key.model
df_year.key.model
autoplot(df_year.key.forecast)
df_year.key.model
autoplot(df_year.key.forecast)
plot(df_year.key.forecast))
df_year.key.model
autoplot(df_year.key.forecast)
plot(df_year.key.forecast)
df_year.train = df_year %>% select(-"mode", "key")
head(df_year.train)
train_mlp <- function(arg){
df_year.ts = ts(arg, start = start, end = end, frequency = 1)
df_year.nn <- mlp(y = df_year.ts)
return(df_year.nn)
}
df_year.train = df_year %>% select(-c("mode", "key"))
head(df_year.train)
train_mlp <- function(arg){
df_year.ts = ts(arg, start = start, end = end, frequency = 1)
df_year.nn <- mlp(y = df_year.ts)
return(df_year.nn)
}
df_year.key.model
autoplot(df_year.key.forecast, ylab="tes")
plot(df_year.key.forecast)
df_year.key.model
autoplot(df_year.key.forecast, ylab="tes", conf.int=TRUE)
plot(df_year.key.forecast)
df_year.key.model
df_year.key.forecast
autoplot(df_year.key.forecast, ylab="tes", conf.int=TRUE)
plot(df_year.key.forecast)
df_year.key.model
df_year.key.forecast
autoplot(df_year.key.forecast, ylab="tes", conf.int=TRUE)
plot(df_year.key.forecast, ylab="tes")
for (i in 2:length(colnames(df_year.train))){
col = colnames(df_year.train)[i]
df_year.col.model
}
for (i in 2:length(colnames(df_year.train))){
col = colnames(df_year.train)[i]
df_year$col.model
}
for (i in 2:length(colnames(df_year.train))){
col = colnames(df_year.train)[i]
print(df_year$col.model)
}
for (i in 2:length(colnames(df_year.train))){
col = colnames(df_year.train)[i]
print(paste0("Training Model for: ", col))
model = train_mlp(df_year.train%>% select(col))
model.forecast = forecast(model, h=12)
assign(paste("df_year.", col,".model", sep=""),model)
assign(paste("df_year.", col,".forecast", sep=""),model.forecast)
print(model)
autoplot(model.forecast)
}
plot(df_year.acousticness.forecast)
axis(1, xaxp=c(minx,maxx,stepsx))
plot(df_year.acousticness.forecast,xaxs="i",yaxs="i",xaxt="n",yaxt="n")
axis(1, xaxp=c(minx,maxx,stepsx))
plot(df_year.acousticness.forecast,xaxs="i",yaxs="i",xaxt="n",yaxt="n")
plot(df_year.acousticness.forecast,xaxs="i",yaxs="i",xaxt="n",yaxt="n",xlab="as")
df_year.acousticness.forecast%>%
stlf(lambda = 0, h = 36) %>%
{cbind(actuals=.$x, forecast_mean=.$mean,
lower_95=.$lower[,"95%"], upper_95=.$upper[,"95%"],
lower_80=.$lower[,"80%"], upper_80=.$upper[,"80%"])} %>%
dygraph() %>%
dySeries("actuals", color = "black") %>%
dySeries(c("lower_80", "forecast_mean", "upper_80"),
label = "80%", color = "blue") %>%
dySeries(c("lower_95", "forecast_mean", "upper_95"),
label = "95%", color = "blue")
interval_value_formatter <- "function(num, opts, seriesName, g, row, col) {
value = g.getValue(row, col);
if(value[0] != value[2]) {
lower = Dygraph.numberValueFormatter(value[0], opts);
upper = Dygraph.numberValueFormatter(value[2], opts);
return '[' + lower + ', ' + upper + ']';
} else {
return Dygraph.numberValueFormatter(num, opts);
}
}"
df_year.acousticness.forecast %>%
stlf(lambda = 0, h = 36) %>%
{cbind(actuals=.$x, forecast_mean=.$mean,
lower_95=.$lower[,"95%"], upper_95=.$upper[,"95%"],
lower_80=.$lower[,"80%"], upper_80=.$upper[,"80%"])} %>%
dygraph(main="Monthly Airline Passengers", ylab = "Monthly Passengers In Thousands") %>%
dyAxis("y", valueFormatter = interval_value_formatter) %>%
dySeries("actuals", color = "black") %>%
dySeries("forecast_mean", color = "blue", label = "forecast") %>%
dySeries(c("lower_80", "forecast_mean", "upper_80"),
label = "80%", color = "blue") %>%
dySeries(c("lower_95", "forecast_mean", "upper_95"),
label = "95%", color = "blue") %>%
dyLegend(labelsSeparateLines=TRUE) %>%
dyRangeSelector() %>%
dyOptions(digitsAfterDecimal = 1) %>%
dyCSS(textConnection(".dygraph-legend {background-color: rgba(255, 255, 255, 0.5) !important; }"))
interval_value_formatter <- "function(num, opts, seriesName, g, row, col) {
value = g.getValue(row, col);
if(value[0] != value[2]) {
lower = Dygraph.numberValueFormatter(value[0], opts);
upper = Dygraph.numberValueFormatter(value[2], opts);
return '[' + lower + ', ' + upper + ']';
} else {
return Dygraph.numberValueFormatter(num, opts);
}
}"
df_year.acousticness.forecast %>%
{cbind(actuals=.$x, forecast_mean=.$mean,
lower_95=.$lower[,"95%"], upper_95=.$upper[,"95%"],
lower_80=.$lower[,"80%"], upper_80=.$upper[,"80%"])} %>%
dygraph(main="Monthly Airline Passengers", ylab = "Monthly Passengers In Thousands") %>%
dyAxis("y", valueFormatter = interval_value_formatter) %>%
dySeries("actuals", color = "black") %>%
dySeries("forecast_mean", color = "blue", label = "forecast") %>%
dySeries(c("lower_80", "forecast_mean", "upper_80"),
label = "80%", color = "blue") %>%
dySeries(c("lower_95", "forecast_mean", "upper_95"),
label = "95%", color = "blue") %>%
dyLegend(labelsSeparateLines=TRUE) %>%
dyRangeSelector() %>%
dyOptions(digitsAfterDecimal = 1) %>%
dyCSS(textConnection(".dygraph-legend {background-color: rgba(255, 255, 255, 0.5) !important; }"))
autoplot(df_year.acousticness.forecast) + geom_forecast()
p1a<-ggplot(data=df_year.acousticness.forecast,aes(x=date,y=observed))
df_year.acousticness.forecast %>%
{cbind(actuals=.$x, forecast_mean=.$mean,
lower_95=.$lower[,"95%"], upper_95=.$upper[,"95%"],
lower_80=.$lower[,"80%"], upper_80=.$upper[,"80%"])} %>%
dygraph() %>%
dySeries("actuals", color = "black") %>%
dySeries(c("lower_80", "forecast_mean", "upper_80"),
label = "80%", color = "blue") %>%
dySeries(c("lower_95", "forecast_mean", "upper_95"),
label = "95%", color = "blue")
for (i in 2:length(colnames(df_year.train))){
col = colnames(df_year.train)[i]
print(paste0("Training Model for: ", col))
model = train_mlp(df_year.train%>% select(col))
model.forecast = forecast(model, h=12)
assign(paste("df_year.", col,".model", sep=""),model)
assign(paste("df_year.", col,".forecast", sep=""),model.forecast)
print(model)
autoplot(model.forecast)
break
}
for (i in 2:length(colnames(df_year.train))){
col = colnames(df_year.train)[i]
print(paste0("Training Model for: ", col))
model = train_mlp(df_year.train%>% select(col))
model.forecast = forecast(model, h=12)
autoplot(model.forecast)
assign(paste("df_year.", col,".model", sep=""),model)
assign(paste("df_year.", col,".forecast", sep=""),model.forecast)
print(model)
autoplot(model.forecast)
break
}
plot(df_year.acousticness.forecast)
autoplot(df_year.acousticness.forecast)
plot(df_year.acousticness.forecast)
autoplot(df_year.acousticness.forecast, ylab = "acoust")
plot(df_year.acousticness.forecast)
autoplot(df_year.acousticness.forecast, ylab = "acoust",PI = TRUE,
shadecols = c("#596DD5", "#D5DBFF"),
fcol = "#0000AA",
flwd = 0.5)
plot(df_year.acousticness.forecast)
autoplot(df_year.acousticness.forecast, ylab = "acoust",PI = TRUE,
fcol = "#0000AA",
flwd = 0.5)
plot(df_year.acousticness.forecast)
autoplot(df_year.acousticness.forecast.fit, ylab = "acoust",PI = TRUE,
fcol = "#0000AA",
flwd = 0.5)
plot(df_year.acousticness.forecast)
autoplot(df_year.acousticness.forecast.fitted, ylab = "acoust",PI = TRUE,
fcol = "#0000AA",
flwd = 0.5)
plot(df_year.acousticness.forecast)
autoplot(df_year.acousticness.forecast$fitted, ylab = "acoust",PI = TRUE,
fcol = "#0000AA",
flwd = 0.5)
plot(df_year.acousticness.forecast)
autoplot(df_year.acousticness.forecast$mean, ylab = "acoust",PI = TRUE,
fcol = "#0000AA",
flwd = 0.5)
plot(df_year.acousticness.forecast)
autoplot(df_year.acousticness.forecast$method, ylab = "acoust",PI = TRUE,
fcol = "#0000AA",
flwd = 0.5)
plot(df_year.acousticness.forecast)
autoplot(df_year.acousticness.forecast$residuals, ylab = "acoust",PI = TRUE,
fcol = "#0000AA",
flwd = 0.5)
plot(df_year.acousticness.forecast)
autoplot(df_year.acousticness.forecast$fitted, ylab = "acoust",PI = TRUE,
fcol = "#0000AA",
flwd = 0.5)
plot(df_year.acousticness.forecast)
model.forecast = forecast(model, h=12)
autoplot(model.forecast, ylab = "acoust",PI = TRUE,
fcol = "#0000AA",
flwd = 0.5)
plot(df_year.acousticness.forecast)
model.forecast = forecast(model, h=12)
autoplot(model.forecast, ylab = "acoust")
for (i in 2:length(colnames(df_year.train))){
col = colnames(df_year.train)[i]
print(paste0("Training Model for: ", col))
model = train_mlp(df_year.train%>% select(col))
model.forecast = forecast(model, h=12)
assign(paste("df_year.", col,".model", sep=""),model)
assign(paste("df_year.", col,".forecast", sep=""),model.forecast)
print(model)
autoplot(model.forecast)
}
colnames(df_year)
plot(df_year.acousticness.forecast)
model.forecast = forecast(model, h=12)
autoplot(model.forecast, ylab = "acoust")
colnames(df_year)
autoplot(df_year.acousticness.forecast)
autoplot(df_year.danceability.forecast)
autoplot(df_year.duration_ms.forecast)
autoplot(df_year.energy.forecast)
autoplot(df_year.instrumentalness.forecast)
autoplot(df_year.liveness.forecast)
autoplot(df_year.loudness.forecast)
autoplot(df_year.speechiness.forecast)
autoplot(df_year.tempo.forecast)
autoplot(df_year.valence.forecast)
autoplot(df_year.popularity.forecast)
autoplot(df_year.key.forecast)
autoplot(df_year.mode.forecast)
colnames(df_year)
autoplot(df_year.acousticness.forecast)
autoplot(df_year.danceability.forecast)
autoplot(df_year.duration_ms.forecast)
autoplot(df_year.energy.forecast)
autoplot(df_year.instrumentalness.forecast)
autoplot(df_year.liveness.forecast)
autoplot(df_year.loudness.forecast)
autoplot(df_year.speechiness.forecast)
autoplot(df_year.tempo.forecast)
autoplot(df_year.valence.forecast)
autoplot(df_year.popularity.forecast)
autoplot(df_year.key.forecast)
#plot(df_year.acousticness.forecast)
#model.forecast = forecast(model, h=12)
#autoplot(model.forecast, ylab = "acoust")
colnames(df_year)
plot(df_year.acousticness.forecast,xlab="asd")
autoplot(df_year.danceability.forecast)
autoplot(df_year.duration_ms.forecast)
autoplot(df_year.energy.forecast)
autoplot(df_year.instrumentalness.forecast)
autoplot(df_year.liveness.forecast)
autoplot(df_year.loudness.forecast)
autoplot(df_year.speechiness.forecast)
autoplot(df_year.tempo.forecast)
autoplot(df_year.valence.forecast)
autoplot(df_year.popularity.forecast)
autoplot(df_year.key.forecast)
#plot(df_year.acousticness.forecast)
#model.forecast = forecast(model, h=12)
#autoplot(model.forecast, ylab = "acoust")
colnames(df_year)
plot(df_year.acousticness.forecast,title="asd")
autoplot(df_year.danceability.forecast)
autoplot(df_year.duration_ms.forecast)
autoplot(df_year.energy.forecast)
autoplot(df_year.instrumentalness.forecast)
autoplot(df_year.liveness.forecast)
autoplot(df_year.loudness.forecast)
autoplot(df_year.speechiness.forecast)
autoplot(df_year.tempo.forecast)
autoplot(df_year.valence.forecast)
autoplot(df_year.popularity.forecast)
autoplot(df_year.key.forecast)
#plot(df_year.acousticness.forecast)
#model.forecast = forecast(model, h=12)
#autoplot(model.forecast, ylab = "acoust")
colnames(df_year)
plot(df_year.acousticness.forecast,plot.type="single")
autoplot(df_year.danceability.forecast)
autoplot(df_year.duration_ms.forecast)
autoplot(df_year.energy.forecast)
autoplot(df_year.instrumentalness.forecast)
autoplot(df_year.liveness.forecast)
autoplot(df_year.loudness.forecast)
autoplot(df_year.speechiness.forecast)
autoplot(df_year.tempo.forecast)
autoplot(df_year.valence.forecast)
autoplot(df_year.popularity.forecast)
autoplot(df_year.key.forecast)
#plot(df_year.acousticness.forecast)
#model.forecast = forecast(model, h=12)
#autoplot(model.forecast, ylab = "acoust")
colnames(df_year)
plot(df_year.acousticness.forecast,ylab="single")
autoplot(df_year.danceability.forecast)
autoplot(df_year.duration_ms.forecast)
autoplot(df_year.energy.forecast)
autoplot(df_year.instrumentalness.forecast)
autoplot(df_year.liveness.forecast)
autoplot(df_year.loudness.forecast)
autoplot(df_year.speechiness.forecast)
autoplot(df_year.tempo.forecast)
autoplot(df_year.valence.forecast)
autoplot(df_year.popularity.forecast)
autoplot(df_year.key.forecast)
#plot(df_year.acousticness.forecast)
#model.forecast = forecast(model, h=12)
#autoplot(model.forecast, ylab = "acoust")
colnames(df_year)
autoplot(df_year.acousticness.forecast)
autoplot(df_year.danceability.forecast)
autoplot(df_year.duration_ms.forecast)
autoplot(df_year.energy.forecast)
autoplot(df_year.instrumentalness.forecast)
autoplot(df_year.liveness.forecast)
autoplot(df_year.loudness.forecast)
autoplot(df_year.speechiness.forecast)
autoplot(df_year.tempo.forecast)
autoplot(df_year.valence.forecast)
autoplot(df_year.popularity.forecast)
autoplot(df_year.key.forecast)
#plot(df_year.acousticness.forecast)
#model.forecast = forecast(model, h=12)
#autoplot(model.forecast, ylab = "acoust")
colnames(df_year)
autoplot(df_year.acousticness.forecast, ylab = "acousticness")
autoplot(df_year.danceability.forecast, ylab = "danceability")
autoplot(df_year.duration_ms.forecast, ylab = "duration_ms")
autoplot(df_year.energy.forecast, ylab = "energy")
autoplot(df_year.instrumentalness.forecast, ylab = "instrumentalness")
autoplot(df_year.liveness.forecast, ylab = "liveness")
autoplot(df_year.loudness.forecast, ylab = "loudness")
autoplot(df_year.speechiness.forecast, ylab = "speechiness")
autoplot(df_year.tempo.forecast, ylab = "tempo")
autoplot(df_year.valence.forecast, ylab = "valence")
autoplot(df_year.popularity.forecast, ylab = "popularity")
autoplot(df_year.key.forecast, ylab = "key")
colnames(df_year)
plot(df_year.acousticness.model)
autoplot(df_year.acousticness.forecast, ylab = "acousticness")
autoplot(df_year.danceability.forecast, ylab = "danceability")
autoplot(df_year.duration_ms.forecast, ylab = "duration_ms")
autoplot(df_year.energy.forecast, ylab = "energy")
autoplot(df_year.instrumentalness.forecast, ylab = "instrumentalness")
autoplot(df_year.liveness.forecast, ylab = "liveness")
autoplot(df_year.loudness.forecast, ylab = "loudness")
autoplot(df_year.speechiness.forecast, ylab = "speechiness")
autoplot(df_year.tempo.forecast, ylab = "tempo")
autoplot(df_year.valence.forecast, ylab = "valence")
autoplot(df_year.popularity.forecast, ylab = "popularity")
autoplot(df_year.key.forecast, ylab = "key")
colnames(df_year)
plot(df_year.danceability.model)
autoplot(df_year.acousticness.forecast, ylab = "acousticness")
autoplot(df_year.danceability.forecast, ylab = "danceability")
autoplot(df_year.duration_ms.forecast, ylab = "duration_ms")
autoplot(df_year.energy.forecast, ylab = "energy")
autoplot(df_year.instrumentalness.forecast, ylab = "instrumentalness")
autoplot(df_year.liveness.forecast, ylab = "liveness")
autoplot(df_year.loudness.forecast, ylab = "loudness")
autoplot(df_year.speechiness.forecast, ylab = "speechiness")
autoplot(df_year.tempo.forecast, ylab = "tempo")
autoplot(df_year.valence.forecast, ylab = "valence")
autoplot(df_year.popularity.forecast, ylab = "popularity")
autoplot(df_year.key.forecast, ylab = "key")
colnames(df_year)
plot(df_year.danceability.model, title= "asd")
autoplot(df_year.acousticness.forecast, ylab = "acousticness")
autoplot(df_year.danceability.forecast, ylab = "danceability")
autoplot(df_year.duration_ms.forecast, ylab = "duration_ms")
autoplot(df_year.energy.forecast, ylab = "energy")
autoplot(df_year.instrumentalness.forecast, ylab = "instrumentalness")
autoplot(df_year.liveness.forecast, ylab = "liveness")
autoplot(df_year.loudness.forecast, ylab = "loudness")
autoplot(df_year.speechiness.forecast, ylab = "speechiness")
autoplot(df_year.tempo.forecast, ylab = "tempo")
autoplot(df_year.valence.forecast, ylab = "valence")
autoplot(df_year.popularity.forecast, ylab = "popularity")
autoplot(df_year.key.forecast, ylab = "key")
for (i in 2:length(colnames(df_year.train))){
col = colnames(df_year.train)[i]
print(paste0("Training Model for: ", col))
model = train_mlp(df_year.train%>% select(col))
model.forecast = forecast(model, h=12)
assign(paste("df_year.", col,".model", sep=""),model)
assign(paste("df_year.", col,".forecast", sep=""),model.forecast)
print(model)
plot(model)
}
colnames(df_year)
autoplot(df_year.acousticness.forecast, ylab = "acousticness")
autoplot(df_year.danceability.forecast, ylab = "danceability")
autoplot(df_year.duration_ms.forecast, ylab = "duration_ms")
autoplot(df_year.energy.forecast, ylab = "energy")
autoplot(df_year.instrumentalness.forecast, ylab = "instrumentalness")
autoplot(df_year.liveness.forecast, ylab = "liveness")
autoplot(df_year.loudness.forecast, ylab = "loudness")
autoplot(df_year.speechiness.forecast, ylab = "speechiness")
autoplot(df_year.tempo.forecast, ylab = "tempo")
autoplot(df_year.valence.forecast, ylab = "valence")
autoplot(df_year.popularity.forecast, ylab = "popularity")
autoplot(df_year.key.forecast, ylab = "key")
# Take all relevant features from the yearly dataset
df_year.train = df_year %>% select(-c("mode", "key"))
head(df_year.train)
# Create a function to take a data frame and transform it into a ts object, and then train an MLP NN with that ts object
train_mlp <- function(arg){
df_year.ts = ts(arg, start = start, end = end, frequency = 1)
df_year.nn <- mlp(y = df_year.ts)
return(df_year.nn)
}
for (i in 2:length(colnames(df_year.train))){
col = colnames(df_year.train)[i]
print(paste0("Training Model for: ", col))
model = train_mlp(df_year.train%>% select(col))
model.forecast = forecast(model, h=12)
assign(paste("df_year.", col,".model", sep=""),model)
assign(paste("df_year.", col,".forecast", sep=""),model.forecast)
# Print Model results and plot the model architecture
print(model)
plot(model)
}
# Plot all forecasts
colnames(df_year)
autoplot(df_year.acousticness.forecast, ylab = "acousticness")
autoplot(df_year.danceability.forecast, ylab = "danceability")
autoplot(df_year.duration_ms.forecast, ylab = "duration_ms")
autoplot(df_year.energy.forecast, ylab = "energy")
autoplot(df_year.instrumentalness.forecast, ylab = "instrumentalness")
autoplot(df_year.liveness.forecast, ylab = "liveness")
autoplot(df_year.loudness.forecast, ylab = "loudness")
autoplot(df_year.speechiness.forecast, ylab = "speechiness")
autoplot(df_year.tempo.forecast, ylab = "tempo")
autoplot(df_year.valence.forecast, ylab = "valence")
autoplot(df_year.popularity.forecast, ylab = "popularity")
autoplot(df_year.key.forecast, ylab = "key")
# Take all relevant features from the yearly dataset
df_year.train = df_year %>% select(-c("mode", "key"))
head(df_year.train)
# Create a function to take a data frame and transform it into a ts object, and then train an MLP NN with that ts object
train_mlp <- function(arg){
df_year.ts = ts(arg, start = start, end = end, frequency = 1)
df_year.nn <- mlp(y = df_year.ts)
return(df_year.nn)
}
for (i in 2:length(colnames(df_year.train))){
col = colnames(df_year.train)[i]
print(paste0("Training Model for: ", col))
model = train_mlp(df_year.train%>% select(col))
model.forecast = forecast(model, h=12)
assign(paste("df_year.", col,".model", sep=""),model)
assign(paste("df_year.", col,".forecast", sep=""),model.forecast)
# Print Model results and plot the model architecture
print(model)
plot(model)
}
